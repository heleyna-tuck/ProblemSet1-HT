---
title: "STATS506_ProbSet1"
author: "Heleyna Tucker"
format: html
editor: visual
---

# Problem 1

### Part A: Import the data into a 'data.frame'  in R. I have given the appropriate column name to the data frame as well: 

```{r}
col_names <- c('class','Alcohol', 'Malic acid', 'Ash', 'Alcalinity of ash', 'Magnesium', 'Total phenols', 'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins', 'Color intensity', 'Hue', 'OD280/OD315 of diluted wines', 'Proline')
wine_data <- read.table(file="/Users/19892/OneDrive/Documents/STATS506/Data/wine.data", sep=",", header=TRUE, col.names = col_names)

wine_data
```

### Part B: The data contains three different classes of wine (1, 2, 3) as seen in the above data frame. 

### Part C: Next, I will use the data to answer the following questions:

1.  What class does the highest alcohol content belong to?

    We will do this using the 'which.max()' function in the Alcohol column from 'wine_data'.

    ```{r}
    max_alcohol <- wine_data[which.max(wine_data$Alcohol),]
    max_alcohol
    ```

Here, we find that the highest alcohol content belongs to class 1, being 14.83 ABV (alcohol by volume).

2.   The wine with the lowest alcohol content belongs to which class?

    For this, we will use a similar function, except with the 'which.min()' function in the Alcohol column from 'wine_data'.

    ```{r}
    min_alcohol <- wine_data[which.min(wine_data$Alcohol),]
    min_alcohol
    ```

Here, we find that the lowest alcohol content belongs to class 2, being 11.03 ABV.

3.   German beers have, on average 114 mg/l of magnesium. How many of these wines have higher levels of magnesium than that? We will assume that the magnesium reported in the data is in the same units.

    Below we will use the length() function, along with the which() function and the given inequality to find how many wines have higher than 114 mg/l of magnesium.

    ```{r}
    length(which(wine_data$Magnesium > 114))
    ```

Found above, there are 25 wines that satisfy the inequality.

4.  Within each class, how many wines have higher levels of magnesium than average German beer?

    I will use a similar technique as before, but adding the condition of what class each condition has.

    ```{r}
    length(which(wine_data$class == 1 & wine_data$Magnesium > 114))

    length(which(wine_data$class == 2 & wine_data$Magnesium > 114))

    length(which(wine_data$class == 3 & wine_data$Magnesium > 114))
    ```

Above we can see that the code tells us that 14 wines in class 1, 6 wines in class 2, and 5 wines in class 3 have higher levels of magnesium than average German beer.

### Part D: I will now create a table identifying the average value of each variable. One row will be provided with the overall average and one row per class with the class averages. 

I will use the colMeans() function to calculate the overall means and individual class (1, 2, 3) means and put the results into a data frame named averages.

```{r}
overall_means <- colMeans(wine_data[,2:14])
class1_means <- colMeans(wine_data[wine_data$class == 1,])
class2_means <- colMeans(wine_data[wine_data$class == 2,])
class3_means <- colMeans(wine_data[wine_data$class == 3,])

averages <- data.frame('Overall mean' = overall_means, 
                        'Class1 mean' = class1_means[2:14], 
                        'Class2 mean' = class2_means[2:14], 
                        'Class3 mean' = class3_means[2:14])

averages
```

Above, we can see the overall means and individual class means. One observation that can be made is that class 1 and class 3 wines have a higher alcohol content than the overall average wine.

### Part E: Below, I will carry out some t-tests to examine whether the level of Ash differs across the three classes.

```{r}
t.test(wine_data$Ash[wine_data$class = 1], wine_data$Ash[wine_data$class = 2], wine_data$Ash[wine_data$class = 3])
```

*I'm not sure how to do this lol*

# Problem 2

### Part A: Below, I will write a function "isPerfectPower" to identify whether a given integer is a perfect power for a given power. 

In the 'isPerfectPower()' function, I take in n and power. I use modular arithmetic: n\^(1/power)mod1

If the remainder is 0, this tells us that the power-root of n is an integer. In other words, n would then be a "perfect power" and there exists an integer *r* (root) and *p* (the power) such that *r\^p = n*. I also output the the root itself.

-   Not sure how to get these to equal each other below.

```{r}
isPerfectPower <- function(n, power) {
  output <- list(isPerfect = all.equal((n^(1/power) %% 1), 0), root = n^(1/power))
  return(output)
}
```

```{r}

isPerfectPower(125, power = 3)

```

Above we can see an example of the function being used. This says that given the numbers, 27 is a perfect power, where 3\^3 = 27.

### Part B: I will demonstrate how the function in Part A works be writing another function "findRootPower()" that calls my first function, using a loop to identify both the root and power. My function will identify the *lowest* power for which the input is perfect.

```{r}
findRootPower <- function(num) {
  for (i in 2:200){
    cat(i, "\n")
    list <- isPerfectPower(num, i)
    if (list$isPerfect == TRUE) {
      return(cat(num, " = ",list$root, "^", i))
      break
    }
      
  }
  return("Input is not a perfect power.")
    
  
}
```

```{r}
findRootPower(125)
```
